# Ultralytics üöÄ AGPL-3.0 License - https://ultralytics.com/license

# PASCAL VOC dataset http://host.robots.ox.ac.uk/pascal/VOC by University of Oxford
# Example usage: python train.py --data VOC.yaml
# parent
# ‚îú‚îÄ‚îÄ yolov5
# ‚îî‚îÄ‚îÄ datasets
#     ‚îî‚îÄ‚îÄ VOC  ‚Üê downloads here (2.8 GB)

# Train/val/test sets as 1) dir: path/to/imgs, 2) file: path/to/imgs.txt, or 3) list: [path/to/imgs1, path/to/imgs2, ..]
path: ../datasets/VOC
train: # train images (relative to 'path')  16551 images
  - images/train2012
  - images/train2007
  - images/val2012
  - images/val2007
val: # val images (relative to 'path')  4952 images
  - images/test2007
test: # test images (optional)
  - images/test2007

# Classes
names:
  0: pessoa
  1: bicicleta
  2: carro
  3: motocicleta
  4: avi√£o
  5: √¥nibus
  6: trem
  7: caminh√£o
  8: barco
  9: sem√°foro
  10: hidrante
  11: placa pare
  12: parqu√≠metro
  13: banco
  14: p√°ssaro
  15: gato
  16: cachorro
  17: cavalo
  18: ovelha
  19: vaca
  20: elefante
  21: urso
  22: zebra
  23: girafa
  24: mochila
  25: guarda-chuva
  26: bolsa
  27: gravata
  28: mala
  29: frisbee
  30: esquis
  31: snowboard
  32: bola esportiva
  33: pipa
  34: taco de baseball
  35: luva de baseball
  36: skate
  37: prancha de surf
  38: raquete de t√™nis
  39: garrafa
  40: ta√ßa de vinho
  41: x√≠cara
  42: garfo
  43: faca
  44: colher
  45: tigela
  46: banana
  47: ma√ß√£
  48: sandu√≠che
  49: laranja
  50: br√≥colis
  51: cenoura
  52: cachorro-quente
  53: pizza
  54: rosquinha
  55: bolo
  56: cadeira
  57: sof√°
  58: vaso de planta
  59: cama
  60: mesa de jantar
  61: vaso sanit√°rio
  62: tv
  63: laptop
  64: mouse
  65: controle remoto
  66: teclado
  67: celular
  68: microondas
  69: forno
  70: torradeira
  71: pia
  72: geladeira
  73: livro
  74: rel√≥gio
  75: vaso
  76: tesoura
  77: ursinho de pel√∫cia
  78: secador de cabelo
  79: escova de dentes

# Download script/URL (optional) ---------------------------------------------------------------------------------------
download: |
  import xml.etree.ElementTree as ET

  from tqdm import tqdm
  from utils.general import download, Path


  def convert_label(path, lb_path, year, image_id):
      def convert_box(size, box):
          dw, dh = 1. / size[0], 1. / size[1]
          x, y, w, h = (box[0] + box[1]) / 2.0 - 1, (box[2] + box[3]) / 2.0 - 1, box[1] - box[0], box[3] - box[2]
          return x * dw, y * dh, w * dw, h * dh

      in_file = open(path / f'VOC{year}/Annotations/{image_id}.xml')
      out_file = open(lb_path, 'w')
      tree = ET.parse(in_file)
      root = tree.getroot()
      size = root.find('size')
      w = int(size.find('width').text)
      h = int(size.find('height').text)

      names = list(yaml['names'].values())  # names list
      for obj in root.iter('object'):
          cls = obj.find('name').text
          if cls in names and int(obj.find('difficult').text) != 1:
              xmlbox = obj.find('bndbox')
              bb = convert_box((w, h), [float(xmlbox.find(x).text) for x in ('xmin', 'xmax', 'ymin', 'ymax')])
              cls_id = names.index(cls)  # class id
              out_file.write(" ".join([str(a) for a in (cls_id, *bb)]) + '\n')


  # Download
  dir = Path(yaml['path'])  # dataset root dir
  url = 'https://github.com/ultralytics/assets/releases/download/v0.0.0/'
  urls = [f'{url}VOCtrainval_06-Nov-2007.zip',  # 446MB, 5012 images
          f'{url}VOCtest_06-Nov-2007.zip',  # 438MB, 4953 images
          f'{url}VOCtrainval_11-May-2012.zip']  # 1.95GB, 17126 images
  download(urls, dir=dir / 'images', delete=False, curl=True, threads=3)

  # Convert
  path = dir / 'images/VOCdevkit'
  for year, image_set in ('2012', 'train'), ('2012', 'val'), ('2007', 'train'), ('2007', 'val'), ('2007', 'test'):
      imgs_path = dir / 'images' / f'{image_set}{year}'
      lbs_path = dir / 'labels' / f'{image_set}{year}'
      imgs_path.mkdir(exist_ok=True, parents=True)
      lbs_path.mkdir(exist_ok=True, parents=True)

      with open(path / f'VOC{year}/ImageSets/Main/{image_set}.txt') as f:
          image_ids = f.read().strip().split()
      for id in tqdm(image_ids, desc=f'{image_set}{year}'):
          f = path / f'VOC{year}/JPEGImages/{id}.jpg'  # old img path
          lb_path = (lbs_path / f.name).with_suffix('.txt')  # new label path
          f.rename(imgs_path / f.name)  # move image
          convert_label(path, lb_path, year, id)  # convert labels to YOLO format
